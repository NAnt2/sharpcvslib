<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Builder</name>
    </assembly>
    <members>
        <member name="T:Sporadicism.Builder.Event.TargetEventArgs">
            <summary>
            The <see cref="T:Sporadicism.Builder.Event.TargetEventArgs"/> class is used to provide feedback on the output
            or progress of a build target.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.Event.TargetEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target that was executed.</param>
            <param name="output">Output of the target.</param>
        </member>
        <member name="P:Sporadicism.Builder.Event.TargetEventArgs.Target">
            <summary>
            Target that was executed.
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.Event.TargetEventArgs.Output">
            <summary>
            The output of the build target.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.Event.TargetEventHandler">
            <summary>
            Summary description for TargetEventHandler.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.MainForm">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="F:Sporadicism.Builder.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.MainForm.#ctor">
            <summary>
            Main application entry point.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.MainForm.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.NAnt.NAntTargets">
            <summary>
            Summary description for NAntTargets.
            </summary>
        </member>
        <member name="T:Microsoft.MSDNMag.AsyncUtils.AlreadyRunningException">
             <summary>
             Exception thrown by AsyncOperation if attempt to start
             an already running process is attempted.
             </summary>
             <remarks>From the MSDN Magazine Article "Give Your .NET-based 
             Application a Fast and Responsive UI with Multiple Threads" by 
             Ian Griffiths. 
             See the May 2003 issue at http://msdn.microsoft.com/
             MSDN Magazine does not make any representation or warranty, 
             express or implied, with respect to any code or other information
             herein. 
             MSDN Magazine disclaims any liability whatsoever for any use of such
             code 
             or other information. 
            </remarks>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AlreadyRunningException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.Runner.NAntRunner">
            <summary>
            Summary description for ProcessRunner.
            </summary>
        </member>
        <member name="T:Microsoft.MSDNMag.AsyncUtils.AsyncOperation">
             <summary>
             Abstract class to assist with building an background
             threaded process which interacts with the UI.   
             </summary>
             <remarks>From the MSDN Magazine Article "Give Your .NET-based 
             Application a Fast and Responsive UI with Multiple Threads" by 
             Ian Griffiths. 
             See the May 2003 issue at http://msdn.microsoft.com/
             MSDN Magazine does not make any representation or warranty, 
             express or implied, with respect to any code or other information
             herein. 
             MSDN Magazine disclaims any liability whatsoever for any use of such
             code 
             or other information. 
            </remarks>   
        </member>
        <member name="F:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.isiTarget">
            <summary>
            The ISynchronizeInvoke object 
            </summary>
        </member>
        <member name="F:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.completeFlag">
            <summary>
            Whether the operation is complete
            </summary>
        </member>
        <member name="F:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.cancelledFlag">
            <summary>
            Whether cancel is flagged
            </summary>
        </member>
        <member name="F:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.cancelAcknowledgedFlag">
            <summary>
            Whether cancellation has been acknowledged interally
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.#ctor(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Creates a new instance of the class and specifies
            the target to fire events to
            </summary>
            <param name="syncTarget">The target object to fire
            events to</param>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.Start">
            <summary>
            Start running
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.Cancel">
            <summary>
            Cancel running
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.CancelAndWait">
            <summary>
            Cancel and wait until the async operation 
            acknowledges completion
            </summary>
            <returns>False if operation completed, True if Cancelled</returns>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.WaitUntilDone">
            <summary>
            Wait until the async operation has completed
            </summary>
            <returns>True if operation is completed, False otherwise</returns>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.DoWork">
            <summary>
            Override to perform the asynchronous work 
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.AcknowledgeCancel">
            <summary>
            Provides a method for the asynchronous object to 
            Acknowledge receipt of a cancellation submitted
            through CancelRequest
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.InternalStart">
            <summary>
            Starts the asynchronous operation
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.CompleteOperation">
            <summary>
            Sets the operation as completed and fires the
            completed event
            </summary>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.FailOperation(System.Exception)">
            <summary>
            Fires the operation failed event
            </summary>
            <param name="e">Exception which caused failure</param>
        </member>
        <member name="M:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.FireAsync(System.Delegate,System.Object[])">
            <summary>
            Provides a thread-safe manner to fire a delegate on the Target
            object.
            </summary>
            <param name="dlg">Delegate to fire</param>
            <param name="pList">Parameter List to the Delegate</param>
        </member>
        <member name="E:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.Completed">
            <summary>
            Raised when the operation has completed
            </summary>
        </member>
        <member name="E:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.Cancelled">
            <summary>
            Raised if the operation is cancelled
            </summary>
        </member>
        <member name="E:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.Failed">
            <summary>
            Raised if the operation fails with an exception
            </summary>
        </member>
        <member name="P:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.IsDone">
            <summary>
            Gets whether the operation is complete or not
            </summary>
        </member>
        <member name="P:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.SyncTarget">
            <summary>
            Gets the ISynchronize invoke Target - the UI object
            to which you want to send events to
            </summary>
        </member>
        <member name="P:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.CancelRequested">
            <summary>
            Gets whether a request to cancel has been made or not
            </summary>
        </member>
        <member name="P:Microsoft.MSDNMag.AsyncUtils.AsyncOperation.HasCompleted">
            <summary>
            Gets whether the operation has completed or not
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.Runner.NAntRunner.#ctor(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Constructor
            </summary>
            <param name="syncInvoke"></param>
        </member>
        <member name="M:Sporadicism.Builder.Runner.NAntRunner.#ctor(System.ComponentModel.ISynchronizeInvoke,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="syncInvoke"></param>
            <param name="target"></param>
        </member>
        <member name="M:Sporadicism.Builder.Runner.NAntRunner.DoWork">
            <summary>
            Implement the asynchronous <see cref="M:Sporadicism.Builder.Runner.NAntRunner.DoWork"/> method.
            </summary>
        </member>
        <member name="E:Sporadicism.Builder.Runner.NAntRunner.TargetOutputEvent">
            <summary>
            Output message event.
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.Runner.NAntRunner.Target">
            <summary>
            NAnt target to execute.
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.Runner.NAntRunner.Debug">
            <summary>
            Used to toggle debug (more verbose) output from NAnt.  Corresponds to the
            <code>-debug</code> property on NAnt.
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.Runner.NAntRunner.Verbose">
            <summary>
            Used to toggle the verbose output from NAnt.  Corresponds to the 
            <code>-verbose</code> property on NAnt.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.App">
            <summary>
            Provides common methods/ properties that describe the application such as name, 
            and version.
            </summary>
        </member>
        <member name="F:Sporadicism.Builder.App.Instance">
            <summary>
            Static accessor for the application variable.  
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.App.Version">
            <summary>
            Version of the application.
            </summary>
        </member>
        <member name="P:Sporadicism.Builder.App.Name">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.NAnt.Target">
            <summary>
            Summary description for Target.
            </summary>
        </member>
        <member name="T:Sporadicism.Builder.Runner.StartRunner">
            <summary>
            Provides a quick, easy way to start a new process.
            </summary>
        </member>
        <member name="F:Sporadicism.Builder.Runner.StartRunner.Instance">
            <summary>
            Static accessor for the <see cref="T:Sporadicism.Builder.Runner.StartRunner"/> class.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.Runner.StartRunner.Run(System.String)">
            <summary>
            Create a new process that will handle the given target.
            </summary>
            <param name="target">This can either be an application or an associated file
                type such as <code>.jpg</code> or <code>.html</code>.  The default 
                application will be launched to handle the request.</param>
        </member>
        <member name="M:Sporadicism.Builder.Runner.StartRunner.Run(System.String,System.String)">
            <summary>
            Launch the given target and pass in the args specified.
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Sporadicism.Builder.ThreadHandler.StartThread">
            <summary>
            Summary description for BrowserThread.
            </summary>
        </member>
        <member name="M:Sporadicism.Builder.ThreadHandler.StartThread.#ctor(System.String)">
            <summary>
            Start a ne thread on the given target.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Sporadicism.Builder.ThreadHandler.StartThread.#ctor(System.String,System.String)">
            <summary>
            Start a ne thread on the given target.
            </summary>
            <param name="target"></param>
        </member>
    </members>
</doc>
