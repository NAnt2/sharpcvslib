#######################################################################################
#
#                       Sharpcvslib Code Format Standards
#                       *********************************
#
# Astyle options file for Sharpcvslib.  For coding formatting guidelines please see:
#   http://sourceforge.net/docman/display_doc.php?docid=18968&group_id=78334
#
#   ** If this document differs from the standard options below please file a bug report
#       or if you know which document needs to be corrected apply a patch.  Thanks! **
#   
# Before submitting code please run the apply-code-standards task located in the
#   build file by running:
#
#               nant apply<dash>code<dash>standards
#
#   NOTE: Dashes are replaced with words so the formatter ignores them.
#
#
# Please see astyle documentation for complete list of options (http://astyle.sf.net).
#
#######################################################################################


# Kernighan&Ritchie style formatting/indenting.
#
#    namespace foospace {
#        int Foo() {
#            if (isBar) {
#                bar();
#                return 1;
#            } else
#                return 0;
#        }
#    }
style=kr

# Indent 'switch' blocks so that the 'case XXX:' headers are indented in the class block.
#
#   The default:
#
#    switch (foo)
#    {
#    case 1:
#        a +<equals>= 2;
#        break;
#
#    default:
#        a +<equals> 2;
#        break;
#    }
#
#    becomes:
#
#    switch (foo)
#    {
#        case 1:
#            a +<equals> 2;
#            break;
#
#        default:
#            a +<equals> 2;
#            break;
#    }
indent-switches

# Indent 'case XXX:' lines so that they are flush with the comand lines under them.
#
#    The default:
#
#    switch (foo)
#    {
#    case 1:
#        {
#            a += 2;
#            break;
#        }
#
#    default:
#        {
#            a += 2;
#            break;
#        }
#    }
#
#    becomes:
#
#    switch (foo)
#    {
#        case 1:
#        {
#            a += 2;
#            break;
#        }
#
#        default:
#        {
#            a += 2;
#            break;
#        }
#    }
indent-cases


# Add extra indentation to namespaces.
#
#    The default:
#
#    namespace foospace
#    {
#    class Foo
#    {
#        public:
#            Foo();
#            virtual ~Foo();
#    };
#    }
#
#    becomes:
#
#    namespace foospace
#    {
#        class Foo
#        {
#            public:
#                Foo();
#                virtual ~Foo();
#        };
#    }
indent-namespaces

# Insert space padding around operators only.
#
#    if (isFoo)
#        a = bar((b <minus> c)*a,*d--);
#
#    becomes:
#
#    if (isFoo)
#        a = bar((b <minus> c) * a, *d--);
pad=oper