<!--
    Build file for the SharpCvsLib project:
        http://sharpcvslib.sourceforge.net
-->
<project name="Sharpcvslib" default="run-tests-sample">
    <include buildfile="SharpCvsLib.local.xml" failonerror="false"/>
    <include buildfile="SharpCvsLib.common.xml" />
    <!-- Targets -->
    <target name="src.update" description="Updates the source from cvs.">
       <!-- To run locally you must have your public key uploaded to sf.net -->
       <property name="cvs.command" value="update -Pd" />
       <echo message="Updating ${dir.base} using cvs command: ${cvs.command}." />
       
       <cvs     module="sharpcvslib" 
                cvsroot=":ext:${name.developer}@cvs.sourceforge.net:/cvsroot/sharpcvslib"
                destination="${dir.base}"
                command="${cvs.command}"
                usesharpcvslib="false" />
    </target>

    <target name="update.version" description="Generate the assembly info file for the project.  Pass in the version number.">
        <!-- Gets the version number and places it in a property called build.version -->
        <ifnot propertyexists="assembly.version">
            <version    buildtype="monthday" 
                        path="build.number" 
                        revisiontype="automatic" 
                        startDate="${assembly.start-date}"
                        prefix="assembly." />
            <property name="assembly.version" value="${assembly.version}" />
            <echo message="Generating assembly info for version ${assembly.version}" />
            <asminfo output="${dir.src}/SharpCvsLibAssemblyInfo.cs" language="CSharp" failonerror="false">
                <imports>
                    <import name="System" />
                    <import name="System.Reflection" />
                    <import name="System.EnterpriseServices" />
                    <import name="System.Runtime.InteropServices" />
                </imports>
                <attributes>
                    <attribute type="ComVisibleAttribute" value="false" />
                    <attribute type="CLSCompliantAttribute" value="true" />
                    <attribute type="AssemblyVersionAttribute" value="${assembly.version}" />
                    <attribute type="AssemblyTitleAttribute" value="${assembly.title}" />
                    <attribute type="AssemblyDescriptionAttribute" value="${assembly.description}" />
                    <attribute type="AssemblyCopyrightAttribute" value="${assembly.copyright.text}" />
                    <attribute type="AssemblyCompanyAttribute" value="${assembly.company}" />
                    <attribute type="ApplicationNameAttribute" value="${name.project}" />
                </attributes>
                <references>
                    <includes name="System.EnterpriseServices.dll" />
                </references>
            </asminfo>    
        </ifnot>    
    </target>
    
    <target name="setup">
        <mkdir dir="${dir.bin}" />
        <mkdir dir="${dir.bin}/tests" />
        <copy todir="${dir.bin}">
            <fileset basedir="${dir.lib}">
                <includes name="${lib.zip}" />
            </fileset>
        </copy>        
        <copy todir="${dir.bin}">
            <fileset basedir="${dir.lib.ext}">
                <includes name="${lib.log4net}" />
                <includes name="${lib.nunit}" />
            </fileset>
        </copy>
        <copy todir="${dir.bin}">
            <fileset basedir="${dir.conf}">
                <includes name="*.config" />
            </fileset>
        </copy>
        <copy   file="${dir.conf}/${name.top-level}.${name.project}.${name.tests}.dll.config" 
                tofile="${dir.bin}/${name.top-level}.${name.project}.${name.tests}-sample.dll.config" />
        <copy todir="${dir.bin}">
            <fileset basedir="${dir.doc}">
                <includes name="NamespaceSummary.xml" />
            </fileset>
        </copy>
        
        <call target="update.version" />
        <echo message="Building assembly version ${assembly.version}" />
    </target>
       
    <target name="build.all" depends="clean" description="Build all sources by calling all targets in project build files.">
        <call target="setup" />
        <call target="build.lib" />
        <call target="build.console" />
        <call target="build.test" />
        <call target="build.test-sample" />
    </target>

    <target name="build.lib" depends="setup">
        <nant buildfile="${dir.build}/${name.project}.build.xml" target="build"/>
    </target>

    <target name="build.console" depends="setup, build.lib">
        <nant buildfile="${dir.build}/${name.console}.build.xml" target="build"/>
    </target>
    
    <target name="build.test" depends="setup, build.lib, build.console">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="build"/>
    </target>
    
    <target name="build.test-sample" depends="setup, build.test" description="Builds all project sources as well as a test binary containing a faster running subset of unit tests..">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="build-sample"/>
    </target>

    <target name="run-tests" depends="build.all">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="run-tests"/>
    </target>
    
    <target name="run-tests-sample" depends="build.all">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="run-tests-sample"/>
    </target>
    <target name="tests-to-html">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="tests-to-html"/>
    </target>

    <target name="netdoc" failonerror="false">
        <property name="doc.exe" value="hhc.exe" />
        
        <property name="doc.show-missing-summaries" value="True" />
        <property name="doc.show-missing-remarks" value="False" />
        <property name="doc.show-missing-params" value="True" />
        <property name="doc.show-missing-returns" value="True" />
        <property name="doc.show-missing-values" value="True" />

        <property name="doc.internals" value="False" />
        <property name="doc.protected" value="True" />
        <property name="doc.privates" value="False" />
        <property name="doc.empty-namespaces" value="False" />

        <property name="doc.include-assembly-version" value="True" />
        
        <ndoc verbose="true">
            <assemblies basedir="${dir.bin}">
                <includes name="${name.top-level}.${name.lib}.dll" />
                <includes name="${name.console.exe}.exe" />
                <excludes name="${name.top-level}.${name.lib}.${name.tests}.dll"/>
            </assemblies>
            <summaries basedir="${dir.bin}">
                <includes name="NamespaceSummary.xml"/>
            </summaries>
            <documenters>
                <documenter name="MSDN">
                    <property name="Title" value="${doc.title}" />
                    <property name="OutputDirectory" value="${dir.doc.msdn}" />

                    <property name="ShowMissingSummaries" value="${doc.show-missing-summaries}" />
                    <property name="ShowMissingRemarks" value="${doc.show-missing-remarks}" />
                    <property name="ShowMissingParams" value="${doc.show-missing-params}" />
                    <property name="ShowMissingReturns" value="${doc.show-missing-returns}" />
                    <property name="ShowMissingValues" value="${doc.show-missing-values}" />

                    <property name="DocumentInternals" value="${doc.internals}" />
                    <property name="DocumentProtected" value="${doc.protected}" />
                    <property name="DocumentPrivates" value="${doc.privates}" />
                    <property name="DocumentEmptyNamespaces" value="${doc.empty-namespaces}" />

                    <property name="IncludeAssemblyVersion" value="${doc.include-assembly-version}" />
                    <property name="CopyrightText" value="${doc.copyright.text}" />
                    <property name="CopyrightHref" value="${doc.copyright.href}" />

                    <property name="HtmlHelpName" value="${doc.title}" />
                    <property name="HtmlHelpCompilerFilename" value="${doc.exe}" />
                    <property name="IncludeFavorites" value="False" />
                    <property name="SplitTOCs" value="False" />
                    <property name="DefaulTOC" value="" />
                    <property name="ShowVisualBasic" value="True" />
                </documenter>
            </documenters> 
        </ndoc>
        <call target="netdoc.include" />
    </target>
    
    <target name="netdoc.include">
        <copy file="${dir.doc}/${license}" todir="${dir.doc.msdn}" />
        <style style="${dir.doc}/NamespaceSummary.xslt" in="${dir.doc}/NamespaceSummary.xml" out="${dir.doc.msdn}/index.html" />
    </target>
    
    <target name="dist.clean" description="Deletes all files in the dist directory.">
        <delete dir="${dir.dist}" failonerror="false" />
    </target>
    
    <target name="dist">
        <call target="setup" />
        <call target="dist.clean" />
        <call target="build.all" failonerror="false" />
        <call target="run-tests-sample" failonerror="false" />
        
        <mkdir dir="${dir.dist}/bin" />
        <mkdir dir="${dir.dist}/bin/doc"/>
        <mkdir dir="${dir.dist}/src" /> 
        <mkdir dir="${dir.dist}/src/doc"/>
        
        <!-- Generate the net doc and send it to the dist folder -->
        <call target="netdoc" />
        <!-- Package the existing html docs and put them in the doc folder too
            this will be used for both the source and binary release -->
        <copy todir="${dir.dist}/doc" flatten="true">
            <fileset basedir="${dir.doc}">
                <includes name="**/*.chm"/>
                <includes name="license.html"/>
            </fileset>
        </copy>
        <!-- Copy the binary and config files from the bin directory -->
        <copy todir="${dir.dist}/bin">
            <fileset basedir="${dir.base}">
                <includes name="${dir.bin}/*.dll"/>
                <includes name="${dir.bin}/*.exe"/>
                <includes name="${dir.bin}/*.config"/>
            </fileset>
        </copy>
        
        <copy todir="${dir.dist}/bin/doc" flatten="true">
            <fileset basedir="${dir.dist}/doc">
                <includes name="**/*.chm"/>
                <includes name="license.html"/>
            </fileset>
        </copy>
        
        <copy todir="${dir.dist}/src">
            <fileset basedir="${dir.base}">
                <includes name="${dir.external-build}**" />
                <includes name="${dir.bin}**" />
                <includes name="${dir.build}**" />
                <includes name="${dir.conf}**" />
                <includes name="${dir.lib}**" />
                <includes name="${dir.src}**" />
                <includes name="${dir.tools}/nant**" />
                
                <excludes name="${dir.doc}**" />
                <excludes name="**/*.log.*" />
                <excludes name="**/bin/**" />
                <excludes name="**/obj/**" />
                <excludes name="**/*.suo" />
                <excludes name="**/*.user" />

            </fileset>
        </copy>

        <copy todir="${dir.dist}/src/doc" flatten="true">
            <fileset basedir="${dir.dist}/doc">
                <includes name="**/*.chm"/>
                <includes name="license.html"/>
            </fileset>
        </copy>

        <delete dir="${dir.dist}/doc" />
    </target>
    
    <target name="integration" depends="src.update, dist">
        <copy todir="${ccnet.log.dir}/${label-to-apply}">
            <fileset basedir="${dir.dist}">
                <includes name="**"/>
            </fileset>
        </copy>
    </target>
    
    <target name="build-release.common">
        <call target="dist" />
        <property name="dir.output" value="${dir.release}/${assembly.version}" />
        <echo message="Building release for version ${assembly.version}." />
        
        <echo message="Building release:" />
        <echo message="-----------------" />
        <echo message="Release version: ${assembly.version}" />
        <echo message="Source directory: ${dir.dist}/src" />
        <echo message="Binary directory: ${dir.dist}/bin" />
        <echo message="Output directory: ${dir.output}" />
        
        <mkdir dir="${dir.output}" />
        
        <zip zipfile="${dir.output}/${name.lib}-${assembly.version}-bin.zip">
            <fileset basedir="${dir.dist}">
                <includes name="bin/**/*.*" />
            </fileset>
        </zip>
        
        <zip zipfile="${dir.output}/${name.lib}-${assembly.version}-src.zip">
            <fileset basedir="${dir.dist}">
                <includes name="src/**/*.*" />
            </fileset>
        </zip>

    </target>
    
    <target name="build-release.sf" depends="build-release.common" description="Produces the sourceforge.net release build.">
        <property name="dir.doc.msdn" value="${dir.dist}/src/doc/api/msdn" />
        <property name="args.copy-docs" value="${dir.doc.msdn}/*.html ${sf.username}:${sf.location.release}/api/msdn" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>
        
        <property name="args.copy-docs" value="${dir.doc.msdn}/*.css ${sf.username}:${sf.location.release}/api/msdn" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>

        <property name="args.copy-docs" value="${dir.doc.msdn}/*.gif ${sf.username}:${sf.location.release}/api/msdn" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>
    </target>
    
    <target name="build-release.nightly" depends="build-release.common" description="Produces the nightly build and uploads to sourceforge.net">
        <property name="args.copy-program" value="${dir.output}/* ${sf.username}:${sf.location.nightly}/" />
        <exec program="${util.copy}" commandline="${args.copy-program}"/>

<!--        
        <property name="args.copy-docs" value="${dir.doc.msdn}/*.html ${sf.username}:${sf.location.nightly}/doc/api" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>

        <property name="args.copy-docs" value="${dir.doc.msdn}/*.css ${sf.username}:${sf.location.nightly}/doc/api" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>
        
        <property name="args.copy-docs" value="${dir.doc.msdn}/*.gif ${sf.username}:${sf.location.nightly}/doc/api" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>
-->        
        <call target="upload-unit-test-results" />
        
    </target>
    
    <target name="upload-unit-test-results">
        <nant buildfile="${dir.build}/${name.tests}.build.xml" target="tests-to-html"/>
        <property name="args.copy-docs" value="${dir.bin}/tests/*.html ${sf.username}:${sf.location.nightly}/tests/" />
        <exec program="${util.copy}" commandline="${args.copy-docs}"/>        
    </target>
    
    <target name="clean">
        <echo message="Binary file directory: ${dir.bin}" />
        <delete dir="${dir.bin}" failonerror="false"/>
    </target>
</project>
